#!/usr/bin/env python3

mantaWkngDir = 'manta_TN/'
mantaTempDir = config['tempDir'].rstrip('/') + '/manta_TN/'
i = CALLERS.index("manta")
mantaNt = config['maxThreads'][i]

rule manta_filter_t_bams:
    input:
        t = get_tumor_bam
    output:
        filtT = mantaWkngDir + 'filtered_bams/{sample}_T.bam'
    params:
        path = execBindPath + 'scripts/',
        t = get_tumor_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}filter_bams.sh {params.t} {output.filtT}'

rule manta_filter_n_bams:
    input:
        n = get_normal_bam
    output:
        filtN = mantaWkngDir + 'filtered_bams/{sample}_N.bam'
    params:
        path = execBindPath + 'scripts/',
        n = get_normal_bam_container
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        '{params.path}filter_bams.sh {params.n} {output.filtN}'

rule manta_index_filtered_t_bams:
    input:
        mantaWkngDir + 'filtered_bams/{sample}_T.bam'
    output:
        mantaWkngDir + 'filtered_bams/{sample}_T.bam.bai'
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        'samtools index {input}'

rule manta_index_filtered_n_bams:
    input:
        mantaWkngDir + 'filtered_bams/{sample}_N.bam'
    output:
        mantaWkngDir + 'filtered_bams/{sample}_N.bam.bai'
    singularity: 'shub://bballew/NGS_singularity_recipes:samtools_1-9'
    shell:
        'samtools index {input}'

rule manta_create_run_script:
    input:
        t = mantaWkngDir + 'filtered_bams/{sample}_T.bam',
        tIndex = mantaWkngDir + 'filtered_bams/{sample}_T.bam.bai',
        n = mantaWkngDir + 'filtered_bams/{sample}_N.bam',
        nIndex = mantaWkngDir + 'filtered_bams/{sample}_N.bam.bai',
        ref = ref,
        fai = ref + '.fai'
    output:
        outFile = mantaTempDir + '{sample}/runWorkflow.py'
    params:
        outParam = tempBindPath + 'manta_TN/{sample}',
        ref = refBindPath + refFile
    singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        'configManta.py \
            --normalBam {input.n} \
            --tumorBam {input.t} \
            --referenceFasta {params.ref} \
            --runDir {params.outParam}'

rule manta_call:
    '''
    There's a long lag time (>>300s) before any of the results/variants
    files start to show up, which snakemake interprets as missing files.
    So, include the pyflow log as input, so that snakemake won't stop
    the pipeline after 300s.

    Need to decide what to do about this step wrt platform independence.
    '''
    input:
        mantaTempDir + '{sample}/runWorkflow.py'
    output:
        mantaTempDir + '{sample}/workspace/pyflow.data/logs/pyflow_log.txt',
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        mantaTempDir + '{sample}/results/stats/svLocusGraphStats.tsv'
    threads: mantaNt
    params:
        tempBindPath + 'manta_TN/{sample}/runWorkflow.py'
    singularity: 'shub://bballew/NGS_singularity_recipes:manta_1-4-0'
    shell:
        '{params} -m local -j {threads}' 

rule manta_move_call_files_pt1:
    input:
        mantaTempDir + '{sample}/runWorkflow.py'
    output:
        mantaWkngDir + '{sample}/runWorkflow.py'
    params:
        wDir = mantaWkngDir + '{sample}/'
    shell:
        'mv {input} {params.wDir}'

rule manta_move_call_files_pt2:
    input:
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi',
        mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz',
        mantaTempDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi'
    output:
        mantaWkngDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/candidateSmallIndels.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/candidateSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/candidateSV.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/diploidSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/diploidSV.vcf.gz.tbi',
        mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz',
        mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz.tbi'
    params:
        wDir = mantaWkngDir + '{sample}/results/variants/'
    shell:
        'mv {input} {params.wDir}'

rule manta_move_call_files_pt3:
    input:
        mantaTempDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        mantaTempDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        mantaTempDir + '{sample}/results/stats/svLocusGraphStats.tsv'
    output:
        mantaWkngDir + '{sample}/results/stats/alignmentStatsSummary.txt',
        mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.tsv',
        mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.xml',
        mantaWkngDir + '{sample}/results/stats/svLocusGraphStats.tsv'
    params:
        wDir = mantaWkngDir + '{sample}/results/stats/'
    shell:
        'mv {input} {params.wDir}'

rule manta_list_output_files:
    input:
        mantaWkngDir + '{sample}/results/variants/somaticSV.vcf.gz'
    output:
        temp(parentDir + 'SV_files_for_annotation_manta.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule manta_merge_list:
    input:
        # i1 = expand(mantaWkngDir + '{sample}/runWorkflow.py', sample=bamDict.keys()),
        # i2 = expand(mantaWkngDir + '{sample}/results/stats/alignmentStatsSummary.txt', sample=bamDict.keys()),
        # i3 = expand(mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.tsv', sample=bamDict.keys()),
        # i4 = expand(mantaWkngDir + '{sample}/results/stats/svCandidateGenerationStats.xml', sample=bamDict.keys()),
        # i5 = expand(mantaWkngDir + '{sample}/results/stats/svLocusGraphStats.tsv', sample=bamDict.keys()),
        # # don't actually need all these above inputs for this step, but I want a uniform rule all with just the last file so these are here now.
        expand(parentDir + 'SV_files_for_annotation_manta.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_manta.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample manta\\n/" > {output}'
