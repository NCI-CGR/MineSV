#!/usr/bin/env python3

import os

conf = os.environ.get("conf")
configfile: conf
execDir = config['execDir']
parentDir = config['outDir']
dataDir = config['inDir']
bamList = config['inFile']
ref = config['refGenome']

# if caller can use multi-threading:
callers = config['callers']
i = callers.index('<caller>')
nt = config['maxThreads'][i]

workingDir = parentDir + '<caller>_TN/'

bamDict = {}
with open(bamList) as f:
    for line in f:
        (pair, tumor, normal) = line.split()
        bamDict[pair] = (dataDir + tumor, dataDir + normal)

def get_tumor_bam(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return tumor

def get_tumor_index(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return tumor + '.bai'

def get_normal_bam(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return normal

def get_normal_index(wildcards):
    (tumor, normal) = bamDict[wildcards.sample]
    return normal + '.bai'

rule all:
	input:
		'<caller-specific final output>',
		parentDir + 'SV_files_for_annotation_<caller>.txt'

# insert caller-specific rules here
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...
# ...

rule list_output_files:
    input:
        workingDir + '<caller output>'
    output:
        temp(parentDir + 'SV_files_for_annotation_<caller>.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_<caller>.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_<caller>.txt'
    shell:
        'cat {input} | sed "1s/^/sample <caller>\\n/" > {output}'