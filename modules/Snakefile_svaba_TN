#!/usr/bin/env python3

import os

# snakemake -s modules/Snakefile_svaba_TN --cluster "qsub -o /DCEG/CGF/Bioinformatics/Production/Bari/Struct_var_pipeline_dev/snake_tests/ -j y -pe by_node 2" --jobs 100 --latency-wait 300
    # tested with chr3part bams - works!

svabaWkngDir = parentDir + 'svaba_TN/'
svabaTempDir = config['tempDir'].rstrip('/') + '/svaba_TN/'
i = CALLERS.index("svaba")
svabaNt = config['maxThreads'][i]

rule svaba_softlink_ref_seq:
    input:
        ref
    output:
        svabaWkngDir + 'refGenome/' + refFile
    shell:
        'ln -s {input} {output}'

rule svaba_index_ref:
    input:
        svabaWkngDir + 'refGenome/' + refFile
    output:
        d = svabaWkngDir + 'refGenome/' + refNoExt + '.dict',
        amb = svabaWkngDir + 'refGenome/' + refFile + '.amb',
        ann = svabaWkngDir + 'refGenome/' + refFile + '.ann',
        bwt = svabaWkngDir + 'refGenome/' + refFile + '.bwt',
        fai = svabaWkngDir + 'refGenome/' + refFile + '.fai',
        pac = svabaWkngDir + 'refGenome/' + refFile + '.pac',
        sa = svabaWkngDir + 'refGenome/' + refFile + '.sa'
    shell:
        'module load bwa samtools Picard;'
        'bwa index -a bwtsw {input};'
        'samtools faidx {input};'
        'picard CreateSequenceDictionary REFERENCE={input} OUTPUT={output.d}'

rule svaba_call:
    input:
        t = get_tumor_bam,
        tIndex = get_tumor_index,
        n = get_normal_bam,
        nIndex = get_normal_index,
        ref = svabaWkngDir + 'refGenome/' + refFile,
        d = svabaWkngDir + 'refGenome/' + refNoExt + '.dict',
        amb = svabaWkngDir + 'refGenome/' + refFile + '.amb',
        ann = svabaWkngDir + 'refGenome/' + refFile + '.ann',
        bwt = svabaWkngDir + 'refGenome/' + refFile + '.bwt',
        fai = svabaWkngDir + 'refGenome/' + refFile + '.fai',
        pac = svabaWkngDir + 'refGenome/' + refFile + '.pac',
        sa = svabaWkngDir + 'refGenome/' + refFile + '.sa'
    output:
        svabaTempDir + 'calls/{sample}.alignments.txt.gz',
        svabaTempDir + 'calls/{sample}.bps.txt.gz',
        svabaTempDir + 'calls/{sample}.contigs.bam',
        svabaTempDir + 'calls/{sample}.discordant.txt.gz',
        svabaTempDir + 'calls/{sample}.log',
        svabaTempDir + 'calls/{sample}.svaba.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.sv.vcf'
    threads: svabaNt
    params:
        opath = svabaTempDir + 'calls/',
        epath = execDir + 'sv_callers/'
    shell:
        'module load gcc/4.8.4;'
        '/DCEG/CGF/Bioinformatics/Production/Bari/Struct_var_pipeline_dev/pipeline/sv_callers/svaba/bin/svaba run \
            -p {threads} \
            -G {input.ref} \
            -t {input.t} \
            -n {input.n} \
            -a {params.opath}{wildcards.sample}'


rule move_call_files:
    input:
        svabaTempDir + 'calls/{sample}.alignments.txt.gz',
        svabaTempDir + 'calls/{sample}.bps.txt.gz',
        svabaTempDir + 'calls/{sample}.contigs.bam',
        svabaTempDir + 'calls/{sample}.discordant.txt.gz',
        svabaTempDir + 'calls/{sample}.log',
        svabaTempDir + 'calls/{sample}.svaba.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.somatic.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.germline.sv.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.indel.vcf',
        svabaTempDir + 'calls/{sample}.svaba.unfiltered.somatic.sv.vcf'
    output:
        svabaWkngDir + 'calls/{sample}.alignments.txt.gz',
        svabaWkngDir + 'calls/{sample}.bps.txt.gz',
        svabaWkngDir + 'calls/{sample}.contigs.bam',
        svabaWkngDir + 'calls/{sample}.discordant.txt.gz',
        svabaWkngDir + 'calls/{sample}.log',
        svabaWkngDir + 'calls/{sample}.svaba.germline.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.germline.sv.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.somatic.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.somatic.sv.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.germline.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.germline.sv.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.somatic.indel.vcf',
        svabaWkngDir + 'calls/{sample}.svaba.unfiltered.somatic.sv.vcf'
    params:
        wDir = svabaWkngDir + 'calls/'
    shell:
        'mv {input} {params.wDir}'

rule svaba_summary:
    input:
        expand(svabaWkngDir + 'calls/{sample}.svaba.somatic.sv.vcf', sample=bamDict.keys())
    output:
        svabaWkngDir + 'summary.txt'
    shell:
        'grep -vc "^##" {input} >> {output}'
        # weirdly, this throws an error if the grep result is 0, so this way it will always detect at least the header row

rule svaba_list_output_files:
    input:
        svabaWkngDir + 'calls/{sample}.svaba.somatic.sv.vcf'
    output:
        temp(parentDir + 'SV_files_for_annotation_svaba.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule svaba_merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_svaba.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_svaba.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample svaba\\n/" > {output}'

