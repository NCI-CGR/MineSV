#!/usr/bin/env python3

gridssWkngDir = 'gridss_TN/'
gridssTempDir = config['tempDir'].rstrip('/') + '/gridss_TN/'
logDir = config['logDir'].rstrip('/') + '/'  # ensure one trailing slash

i = CALLERS.index("gridss")
gridssNt = config['maxThreads'][i]

# if the caller is multi-threaded:
i = CALLERS.index("gridss")
gridssNt = config['maxThreads'][i]
UCSC_HG19 = "BSgenome.Hsapiens.UCSC.hg19"


rule gridss_somatic_call:
    input: 
        ref=ref,
        t=get_tumor_bam,
        n=get_normal_bam
    output: 
        vcf=gridssWkngDir + "{sample}.vcf.gz",
        assembly=gridssWkngDir + "{sample}.assembly.bam"
    params: 
        ref = refBindPath + refFile,
        t=get_tumor_bam_container,
        n=get_normal_bam_container,
        w= gridssWkngDir + "{sample}_workingdir"
    resources: 
        mem_mb=40000
    log:
        logDir + 'gridss_somatic_call.{sample}.log'   
    benchmark:
        "benchmarks/gridss_somatic_call/{sample}.tsv" 
    threads: gridssNt 
    singularity: 
        'library://weizhu365/mocca-sv/gridss_2-9-4:1.0.0'
    shell: 
        """
            gridss.sh --reference {params.ref} \
                         --output {output.vcf} \
                         --assembly {output.assembly} \
                         --threads {threads} \
                         --workingdir {params.w} \
                         --jvmheap 30g \
                         --steps All  \
                         --maxcoverage 50000 \
                         --labels normal,tumor \
                         {params.n} {params.t}
        """

rule gridss_somatic_filter:
    input: 
        vcf=gridssWkngDir + "{sample}.vcf.gz"
    output: 
        somatic= gridssWkngDir + "{sample}_somatic.vcf.bgz",
        full= gridssWkngDir + "{sample}_full.vcf.bgz"
    benchmark:
        "benchmarks/gridss_somatic_filter/{sample}.tsv"
    params: 
        ref=UCSC_HG19,
        somatic=gridssWkngDir + "{sample}_somatic.vcf",
        full=gridssWkngDir + "{sample}_full.vcf"
    log:
        logDir + 'gridss_stomatic_filter.{sample}.log'
    singularity: 
        'library://weizhu365/mocca-sv/gridss_2-9-4:1.0.0'
    shell:
        """
            gridss_somatic_filter.R --ref {params.ref}  \
                --input {input.vcf} \
                --output {params.somatic} \
                --fulloutput {params.full} \
                --scriptdir /opt/gridss  \
                --normalordinal 1 \
                --tumourordinal 2 \
                --gc 
        """

rule rename_bgz_to_gz:
    input:
        somatic=gridssWkngDir + "{sample}_somatic.vcf.bgz",
        full=gridssWkngDir + "{sample}_full.vcf.bgz"
    output:
        somatic= gridssWkngDir + "{sample}_somatic.vcf.gz",
        full= gridssWkngDir + "{sample}_full.vcf.gz"
    shell: 
        """
            mv {input.somatic} {output.somatic} ; 
            mv {input.somatic}.tbi {output.somatic}.tbi ; 
            mv {input.full} {output.full} ;
            mv {input.full}.tbi {output.full}.tbi
        """

# end with these two rules, which feed back into the final rules in the scaffold (combine_ann_files and all)
rule gridss_list_output_files:
    input:
        gridssWkngDir + '{sample}_somatic.vcf.gz'
    output:
        temp(parentDir + 'SV_files_for_annotation_gridss.{sample}.txt')
    params:
        path = execDir + 'scripts/'
    shell:
        '{params.path}list_files.sh {input} {wildcards.sample} > {output}'

rule gridss_merge_list:
    input:
        expand(parentDir + 'SV_files_for_annotation_gridss.{sample}.txt', sample=bamDict.keys())
    output:
        parentDir + 'SV_files_for_annotation_gridss.txt'
    shell:
        'cat {input} | sort | sed "1s/^/sample gridss\\n/" > {output}'